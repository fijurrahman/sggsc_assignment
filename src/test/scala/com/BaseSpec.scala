package com

import com.holdenkarau.spark.testing.DataFrameSuiteBase
import org.apache.spark.sql.DataFrame
import org.scalatest.{BeforeAndAfterAll, FlatSpec}
import com.github.mrpowers.spark.fast.tests.DatasetComparer
import com.typesafe.scalalogging.StrictLogging
import com.utils.{ConfigUtil, SparkIOUtil, StringConstantsUtil, WorkflowRunnerConfigureUtil}

class BaseSpec extends FlatSpec with DataFrameSuiteBase with BeforeAndAfterAll with StrictLogging  with DatasetComparer{

  var paramsMap: Map[String, Any] = Map.empty
  var dataFrameMap: Map[String, DataFrame] = Map.empty

  override def beforeAll {
    // Need to invoke the beforeAll implementation from "DataFrameSuiteBase" class to ensure sparkSession is loaded
    BaseSpec.super.beforeAll

    // Local run specific params
    paramsMap = Map("runtype" -> "standalone", "runmode" -> "local", "env" -> "dev", "workflow" -> "CustomerRiskRatingsWF")
    paramsMap = WorkflowRunnerConfigureUtil.updateParamMap(paramsMap, ConfigUtil.appConfig)

    logger.debug(s"update paramsMap [$paramsMap")

    // Setting the sparkSession generated by DataFrameSuiteBase in the SparkArchetype context
    SparkIOUtil.spark = spark
  }

}